{"version":3,"sources":["components/02-ExtendedWeather/c2-Chart/Chart.module.css","components/01-HomeWeather/c2-WeatherDetails/WeatherDetails.tsx","api/api.ts","redux/weatherReducer.ts","components/01-HomeWeather/c1-Weather/Weather.tsx","components/02-ExtendedWeather/c2-Chart/Table/Table.tsx","components/02-ExtendedWeather/c2-Chart/Chart.tsx","components/02-ExtendedWeather/c1-Card/Card.tsx","components/02-ExtendedWeather/c3-SearchCity/SearchCity.tsx","hooks/useTypedSelector.ts","components/02-ExtendedWeather/ExtendedWeather.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["module","exports","WeatherDetails","props","className","city","temperature","descript","humidity","windSpeed","apiKey","instance","axios","create","baseURL","weatherAPI","setData","get","then","r","data","slice","createSlice","name","initialState","citiesWeather","reducers","addCityWeather","state","action","payload","cityWeather","refetchCityWeather","map","cityW","id","weather","setCities","weatherReducer","reducer","actions","addCityWeatherThunk","dispatch","a","cod","defaultData","country","list","Date","now","tempScale","console","log","time","humid","weatherCode","Weather","useState","useDispatch","useEffect","date","getHours","minutes","getMinutes","Math","round","main","temp","description","wind","speed","catch","error","getWeather","Table","dailyData","filter","reading","includes","Button","Temperature","Chart","React","memo","weatherData","allDaysWeatherData","oneDayWeather","dateFormat","dt_txt","floor","s","chartContainer","Card","day","currentWeather","formatedDate","SearchCity","value","setValue","onClick","values","Input","onChange","e","currentTarget","type","useTypedSelector","useSelector","ExtendedWeather","index","App","variant","to","c","path","element","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23b21269.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartContainer\":\"Chart_chartContainer__kabZ-\",\"tooltip\":\"Chart_tooltip__327dg\",\"label\":\"Chart_label__1gBTW\"};","import React from 'react'\ntype WeatherDetailsType={\n\tcity: string,\n\tdescript: string,\n\ttemperature:number,\n\thumidity:number,\n\twindSpeed: number\n}\nconst WeatherDetails = (props:WeatherDetailsType) => {\n\treturn(\n\t\t<div className=\"weather-details\">\n\t\t\t<div className=\"city\">{props.city}</div>\n\t\t\t<div className=\"temperature\">{props.temperature} &deg; C</div>\n\t\t\t<div className=\"descript\">{props.descript}</div>\n\t\t\t<div className=\"humidity\">Влажность {props.humidity} %</div>\n\t\t\t<div className=\"windSpeed\">Скорость ветра {props.windSpeed} м/c</div>\n\t\t</div>\n\t)\n}\n\n\nexport default WeatherDetails\n","import axios from \"axios\";\nimport {homeWeatherStateType} from \"../redux/type\";\n\n\nconst apiKey = '4551927ed89918c0f0992a61b88ea970'\nconst instance = axios.create({\n    baseURL: \"http://api.openweathermap.org/data/2.5\",\n});\n\nexport const weatherAPI = {\n    getWeather(city: string, setData: any) {\n        return instance.get<homeWeatherStateType>(`/weather?q=${city}&appid=${apiKey}&units=metric`)\n    },\n    getWeatherByCity(city: string) {\n        return instance.get(`/forecast?q=${city}&appid=${apiKey}&units=metric`)\n            .then(r => r.data)\n    }\n}","import {Dispatch} from \"redux\";\nimport {weatherAPI} from \"../api/api\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type CityWeather = {\n    city: string\n    country: string\n    weather: any[]\n    id: number\n    tempScale: 'F' | 'C'\n}\n\nexport type WeatherStateType = {\n    citiesWeather: CityWeather[]\n}\nconst initialState: WeatherStateType = {\n    citiesWeather: []\n}\nconst generateCityObj = (defaultData: any) => {\n    return {\n        city: defaultData.city.name,\n        country: defaultData.city.country,\n        weather: defaultData.list,\n        id: Date.now(),\n        tempScale: 'C'\n    } as CityWeather\n}\nconst slice = createSlice({\n    name: 'weather',\n    initialState: initialState,\n    reducers: {\n        addCityWeather(state, action: PayloadAction<{ cityWeather: CityWeather }>) {\n            return {...state, citiesWeather: [action.payload.cityWeather]}\n        },\n        refetchCityWeather(state, action: PayloadAction<{ id: number, weather: any[], name: string }>) {\n            return {\n                ...state, citiesWeather: state.citiesWeather.map(cityW => {\n                    if (cityW.id === action.payload.id) {\n                        cityW.weather = action.payload.weather\n                        cityW.city = action.payload.name\n                    }\n                    return cityW\n                })\n            }\n        },\n        setCities(state,action:PayloadAction<{citiesWeather: CityWeather[]}>){\n            return { ...state, citiesWeather: action.payload.citiesWeather }\n        }\n    }\n})\n\nexport const weatherReducer = slice.reducer\nexport const {\n    addCityWeather, refetchCityWeather,setCities\n} = slice.actions\n\nexport const addCityWeatherThunk = (city: string) => async (dispatch: Dispatch) => {\n    try {\n        const data = await weatherAPI.getWeatherByCity(city)\n\n        if (data.cod === '200') {\n            const city = generateCityObj(data)\n\n            await dispatch(addCityWeather({cityWeather: city}))\n            debugger\n            return city\n        }\n        return null\n\n    } catch (e) {\n        console.log(e)\n    }\n}\nexport const refetchCitiesWeatherThunk = (cities: CityWeather[]) => async (dispatch: any) => {\n    try {\n        cities.forEach(async (city) => {\n            const data = await weatherAPI.getWeatherByCity(city.city)\n\n            if (data.cod === '200') {\n                await dispatch(refetchCityWeather({id: city.id, weather: data.list, name: data.city.name}))\n            }\n        })\n    } catch (e) {\n        console.log(e)\n    }\n}\nexport const getWeather = (city: string, setData: any) => (dispatch: Dispatch) => {\n    weatherAPI.getWeather(city, setData)\n        .then(r => r.data)\n        .then(data => {\n            const date = new Date()\n            const time = date.getHours()\n            let minutes = date.getMinutes()\n            setData({\n                time,\n                minutes,\n                city,\n                temperature: Math.round(data.main.temp),\n                humid: Math.round(data.main.humidity),\n                descript: data.weather[0].description,\n                weatherCode: data.weather[0].id,\n                windSpeed: data.wind.speed\n            })\n        })\n        .catch(error => console.error(error))\n}\nexport default weatherReducer;","import React, {useEffect, useState} from 'react'\nimport WeatherDetails from \"../c2-WeatherDetails/WeatherDetails\";\nimport {useDispatch} from \"react-redux\";\nimport {getWeather} from \"../../../redux/weatherReducer\";\n\nconst initialState = {\n    time: 0,\n    temperature: 0,\n    humid: 0,\n    weatherCode: 0,\n    descript: '',\n    windSpeed: 0,\n}\n\ntype WidgetType = {\n    city: string\n}\nconst Weather = (props: WidgetType) => {\n    const [data, setData] = useState({...initialState})\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getWeather(props.city, setData))\n    }, [])\n\n    return (\n        <div className=\"widget\">\n            <WeatherDetails\n                city={props.city}\n                temperature={data.temperature}\n                humidity={data.humid}\n                descript={data.descript}\n                windSpeed={data.windSpeed}/>\n        </div>\n    )\n}\nexport default Weather\n","import React from \"react\";\nimport './Table.css'\nimport {Button} from \"@material-ui/core\";\n\ntype TableWeatherType= {\n    data: any\n}\n\nexport const Table = (props: TableWeatherType) => {\n    // @ts-ignore\n    const dailyData = props.data.filter(reading => reading.date.includes(\"15:00\"))\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th>\n                    <Button>Date</Button>\n                </th>\n                <th>\n                    <Button>Temperature</Button>\n                </th>\n            </tr>\n            </thead>\n            <tbody>\n            {dailyData.map((data:any) => (\n                <tr key={data.id}>\n                    <td>{data.date}</td>\n                    <td>{data.Temperature}℃</td>\n                </tr>\n            ))}\n            </tbody>\n        </table>\n    );\n};\n","import dateFormat from 'dateformat'\nimport React, {FC} from 'react'\nimport s from './Chart.module.css'\nimport {Table} from \"./Table/Table\";\nimport {CityWeather} from \"../../../redux/weatherReducer\";\n\ntype ChartPropsType = {\n    allDaysWeatherData: any[]\n}\n\nconst Chart: FC<ChartPropsType> = React.memo(({allDaysWeatherData}) => {\n    const weatherData = allDaysWeatherData.map(oneDayWeather => ({\n        date: dateFormat(oneDayWeather.dt_txt, 'dd.mm HH:MM'),\n        Temperature: Math.floor(oneDayWeather.main.temp)\n    }))\n    return (\n        <div className={s.chartContainer}>\n            <Table data={weatherData}/>\n        </div>\n    )\n})\n\nexport default Chart","import React from 'react';\r\nimport './Card.css';\r\nimport {CityWeather} from \"../../../redux/weatherReducer\";\r\nimport dateFormat from 'dateformat';\r\nimport Chart from \"../c2-Chart/Chart\";\r\n\r\ntype CardType = {\r\n    day: CityWeather\r\n}\r\nexport const Card = (props: CardType) => {\r\n    console.log(props.day.weather[0])\r\n    const currentWeather = props.day.weather[0]\r\n    const formatedDate = dateFormat(currentWeather.dt_txt, 'ddd, d mmmm, HH:MM')\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div>\r\n                <h3 className=\"card-title\">{formatedDate}</h3>\r\n                <h2>{Math.round(currentWeather.main.temp)} °C</h2>\r\n                <div className=\"card-body\">\r\n                    <Chart\r\n                        allDaysWeatherData={props.day.weather}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport './SearchCity.css';\nimport {Button, Input} from \"@material-ui/core\";\nimport {addCityWeather, addCityWeatherThunk, CityWeather} from \"../../../redux/weatherReducer\";\n\n\nexport const SearchCity = () => {\n    const [value, setValue] = useState<string>('')\n\n    const dispatch = useDispatch();\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setValue(e.currentTarget.value)\n    }\n    const onClick = async (values?: string) => {\n        if (value) {\n            const city = await dispatch(addCityWeatherThunk(values ? values : value) as unknown as CityWeather)\n            if (city) {\n                setValue('')\n                return\n            }\n        } else {\n            console.log('error')\n        }\n    };\n    return (\n        <div className='searchWrapper'>\n            <Input value={value} onChange={onChangeHandler} type=\"text\"/>\n            <Button onClick={() => onClick()}>Find</Button>\n        </div>\n    );\n};\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\"\nimport {AppRootStateType} from \"../redux/store\";\n\nexport const useTypedSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\n","import React, {useEffect} from \"react\";\r\nimport {Card} from \"./c1-Card/Card\";\r\nimport './c1-Card/Card.css';\r\nimport {SearchCity} from \"./c3-SearchCity/SearchCity\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\n\r\n\r\nconst ExtendedWeather = () => {\r\n    const { citiesWeather } = useTypedSelector((state) => state.weather)\r\n\r\n    const formatCards = () => {\r\n        debugger;\r\n\r\n        return citiesWeather.map((day, index) => <Card day={day} key={day.id}/>)\r\n    }\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <h1 className=\"display\">Прогноз погоды на 5 дней</h1>\r\n            <SearchCity />\r\n            <div className=\"display\">\r\n                {formatCards()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ExtendedWeather;\r\n","import React, {useEffect} from 'react';\nimport {useSelector} from \"react-redux\";\nimport {NavLink, Route, Routes} from 'react-router-dom';\nimport './App.css';\nimport Weather from \"./components/01-HomeWeather/c1-Weather/Weather\";\nimport ExtendedWeather from \"./components/02-ExtendedWeather/ExtendedWeather\";\nimport {Button} from \"@material-ui/core\";\nimport {CityWeather} from \"./redux/weatherReducer\";\nimport {AppRootStateType} from \"./redux/store\";\nimport localStorageService from \"./localStorage\";\n\n\nconst App = () => {\n    const cities = ['Moscow', 'Minsk', 'Bratislava']\n\n/*\n    const weather = useSelector<AppRootStateType, CityWeather[]>((state) => state.weather.citiesWeather)\n*/\n\n    return (\n        <div className=\"app-container\">\n            <Button variant=\"outlined\">\n                <NavLink className=\"app-header\" to=\"/extended\">Прогноз погоды на 5 дней</NavLink>\n            </Button>\n            <div className=\"app\">\n                {\n                    cities.map(c =>\n                        <Weather key={c} city={c}/>\n                    )\n                }\n                <div>\n                    <Routes>\n                        <Route\n                            path=\"/extended\" element={<ExtendedWeather/>}/>\n                    </Routes>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport {weatherReducer} from \"./weatherReducer\";\nimport {configureStore} from '@reduxjs/toolkit'\nimport thunkMiddleware from 'redux-thunk'\n\nconst rootReducer = combineReducers({\n    weather: weatherReducer,\n})\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\n})\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {store} from \"./redux/store\";\nimport AppContainer from \"./AppContainer\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);"],"sourceRoot":""}